Ce fichier regroupe tout le code Python relatif au **scraping d'images**.
Il contient le script principal, le gestionnaire de profils permettant de
sauvegarder des s√©lecteurs CSS, le suivi de l'historique des op√©rations et les
widgets Qt qui orchestrent ces √©l√©ments. Le widget d'interface
``ImageScraperWidget`` charge les profils via ``profile_manager`` afin de
d√©terminer quel s√©lecteur utiliser et enregistre chaque ex√©cution dans
``history``.

# image_scraper.py
import os
import re
import time
from pathlib import Path
from typing import List, Set
from urllib.parse import urljoin

import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

DEFAULT_USER_AGENT = (
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
    "AppleWebKit/537.36 (KHTML, like Gecko) "
    "Chrome/124.0.0.0 Safari/537.36"
)


def _create_driver(user_agent: str = DEFAULT_USER_AGENT) -> webdriver.Chrome:
    options = Options()
    options.add_argument(f"--user-agent={user_agent}")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option("useAutomationExtension", False)
    driver = webdriver.Chrome(options=options)
    driver.execute_cdp_cmd(
        "Page.addScriptToEvaluateOnNewDocument",
        {
            "source": "Object.defineProperty(navigator, 'webdriver', {get: () => undefined});"
        },
    )
    return driver


def _scroll_page(driver: webdriver.Chrome, pause: float = 0.5) -> None:
    last_height = driver.execute_script("return document.body.scrollHeight")
    position = 0
    while position < last_height:
        position += 600
        driver.execute_script(f"window.scrollTo(0, {position});")
        time.sleep(pause)
        last_height = driver.execute_script("return document.body.scrollHeight")


def _simulate_slider_interaction(driver: webdriver.Chrome) -> None:
    try:
        dots = driver.find_elements(By.CSS_SELECTOR, ".flickity-page-dots .dot")
        for i, dot in enumerate(dots):
            driver.execute_script("arguments[0].click();", dot)
            print(f"üü° Clic sur le point {i+1}/{len(dots)}")
            time.sleep(1.2)
    except Exception as e:
        print(f"‚ö†Ô∏è Aucun slider d√©tect√© ou erreur : {e}")


def _extract_urls(driver: webdriver.Chrome, selector: str) -> List[str]:
    elements = driver.find_elements(By.CSS_SELECTOR, selector)
    urls: Set[str] = set()

    for el in elements:
        tag = el.tag_name.lower()

        # Si c'est une balise <a>, on essaie de r√©cup√©rer l'attribut href
        if tag == "a":
            href = el.get_attribute("href")
            if href and href.endswith((".jpg", ".jpeg", ".png", ".webp")):
                urls.add(href)
                continue

        # Si c'est une balise <img> ou autre avec data-photoswipe-src / src / data-src
        src = (
            el.get_attribute("data-photoswipe-src")
            or el.get_attribute("src")
            or el.get_attribute("data-src")
        )
        if src:
            if src.startswith("//"):
                src = "https:" + src
            elif src.startswith("/"):
                src = urljoin(driver.current_url, src)
        if src and not src.startswith("data:image"):
            urls.add(src)
            continue

        # V√©rifie aussi dans le style (cas d'image en background)
        style = el.get_attribute("style") or ""
        match = re.search(r"url\(['\"]?(.*?)['\"]?\)", style)
        if match:
            url = match.group(1)
            if not url.startswith("data:image"):
                urls.add(url)

    return list(urls)


def _download(url: str, folder: Path) -> None:
    if url.startswith("data:image"):
        print(f"\u26A0\uFE0F Ignor√© (image base64) : {url[:50]}...")
        return

    try:
        resp = requests.get(url, timeout=10)
        resp.raise_for_status()

        # V√©rifie que la r√©ponse est bien une image
        content_type = resp.headers.get("Content-Type", "")
        if not content_type.startswith("image/"):
            print(f"\u274c Mauvais type de contenu pour {url}: {content_type}")
            return

        # Ignore les contenus vides ou trop petits pour √™tre une image r√©elle
        if not resp.content or len(resp.content) < 100:
            print(f"\u26A0\uFE0F R√©ponse vide ou suspecte pour {url}")
            return

    except Exception as exc:
        print(f"\u274c Erreur lors du t√©l√©chargement de {url}: {exc}")
        return

    # Enregistrement avec gestion de collision de nom
    name = os.path.basename(url.split("?")[0]) or "image"
    path = folder / name
    base, ext = os.path.splitext(path)
    idx = 1
    while path.exists():
        path = Path(f"{base}_{idx}{ext}")
        idx += 1
    with open(path, "wb") as f:
        f.write(resp.content)


def _folder_from_url(url: str) -> Path:
    """Return a folder name derived from ``url``.

    The last segment of the path is used, hyphens are replaced with spaces and
    unsafe characters are removed.
    """
    from urllib.parse import urlparse, unquote

    path = unquote(urlparse(url).path)
    name = Path(path).name.replace("-", " ")
    # keep alphanumeric characters, spaces and underscores only
    name = re.sub(r"[^\w\s]", "", name).strip()
    return Path(name or "images")


def scrape_images(page_url: str, selector: str, folder: str | Path = "images") -> int:
    """Download images from ``page_url`` into a subfolder of ``folder``.

    The subfolder name is derived from the URL's last path segment.
    """
    print("Chargement...")
    driver = _create_driver()
    try:
        driver.get(page_url)
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, selector))
        )
        _simulate_slider_interaction(driver)
        _scroll_page(driver)
        urls = _extract_urls(driver, selector)
        total = len(urls)
        if total == 0:
            print(
                "‚ö†Ô∏è Aucune image trouv√©e. V√©rifie si le slider charge bien dynamiquement."
            )
        else:
            print(f"{total} images trouv\u00e9es")
    finally:
        driver.quit()

    base_dir = Path(folder)
    images_dir = base_dir / _folder_from_url(page_url)
    images_dir.mkdir(parents=True, exist_ok=True)
    for i, url in enumerate(urls, 1):
        print(f"T\u00e9l\u00e9chargement de l'image n\u00b0{i}/{total}")
        _download(url, images_dir)
    print("\u2705 Termin\u00e9")
    return total


if __name__ == "__main__":
    scrape_images("https://exemple.com/produit", ".product-image img")

# profile_manager.py
import json
from pathlib import Path
from typing import List, Dict

# Path to the JSON file storing profiles. By default it is located at the
# project root but can be overridden in tests by changing this variable.
PROFILES_FILE = Path(__file__).resolve().parents[2] / "profiles.json"


def load_profiles() -> List[Dict[str, str]]:
    """Load scraping profiles from :data:`PROFILES_FILE`.

    Returns an empty list if the file does not exist or is empty.
    """
    if not PROFILES_FILE.exists():
        return []
    try:
        with open(PROFILES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        if isinstance(data, list):
            return [p for p in data if isinstance(p, dict)]
    except Exception:
        pass
    return []


def save_profiles(profiles: List[Dict[str, str]]) -> None:
    """Write ``profiles`` to :data:`PROFILES_FILE` in JSON format."""
    with open(PROFILES_FILE, "w", encoding="utf-8") as f:
        json.dump(profiles, f, indent=2, ensure_ascii=False)


def add_profile(name: str, selector: str) -> None:
    """Add a new profile with ``name`` and ``selector``.

    Raises ``ValueError`` if a profile with the same name already exists.
    """
    profiles = load_profiles()
    if any(p.get("name") == name for p in profiles):
        raise ValueError(f"Profile '{name}' already exists")
    profiles.append({"name": name, "selector": selector})
    save_profiles(profiles)


def update_profile(name: str, selector: str) -> bool:
    """Update an existing profile's selector.

    Returns ``True`` if the profile was updated, ``False`` otherwise.
    """
    profiles = load_profiles()
    updated = False
    for profile in profiles:
        if profile.get("name") == name:
            profile["selector"] = selector
            updated = True
            break
    if updated:
        save_profiles(profiles)
    return updated


def delete_profile(name: str) -> bool:
    """Delete the profile with ``name``.

    Returns ``True`` if the profile was removed, ``False`` otherwise.
    """
    profiles = load_profiles()
    new_profiles = [p for p in profiles if p.get("name") != name]
    if len(new_profiles) == len(profiles):
        return False
    save_profiles(new_profiles)
    return True

# history.py
import json
from pathlib import Path
from datetime import datetime
from typing import List, Dict

# Path to the history log file at project root
HISTORY_FILE = Path(__file__).resolve().parents[2] / "scraping_history.json"

# Path to file storing last used url/folder
LAST_USED_FILE = Path(__file__).resolve().parents[2] / "scraping_last_used.json"


def _read_json(path: Path) -> List[Dict]:
    if not path.exists():
        return []
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f) or []
    except Exception:
        return []


def _write_json(path: Path, data) -> None:
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


def log_scrape(url: str, profile: str, images: int, folder: str) -> None:
    """Append a scraping entry to :data:`HISTORY_FILE`."""
    entries = _read_json(HISTORY_FILE)
    entries.append(
        {
            "date": datetime.now().isoformat(timespec="seconds"),
            "url": url,
            "profile": profile,
            "images": images,
            "folder": folder,
        }
    )
    _write_json(HISTORY_FILE, entries)
    save_last_used(url, folder)


def load_history() -> List[Dict]:
    """Return the list of logged scraping entries."""
    return _read_json(HISTORY_FILE)


def save_last_used(url: str, folder: str) -> None:
    _write_json(LAST_USED_FILE, {"url": url, "folder": folder})


def load_last_used() -> Dict[str, str]:
    if not LAST_USED_FILE.exists():
        return {"url": "", "folder": ""}
    try:
        with open(LAST_USED_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        if isinstance(data, dict):
            return {"url": data.get("url", ""), "folder": data.get("folder", "")}
    except Exception:
        pass
    return {"url": "", "folder": ""}

# widgets/image_widget.py
from PySide6.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QLabel,
    QPushButton,
    QTextEdit,
    QProgressBar,
    QLineEdit,
    QFileDialog,
    QHBoxLayout,
    QComboBox,
    QApplication,
)
from PySide6.QtCore import Qt, Slot
from PySide6.QtGui import QClipboard

import sys
from pathlib import Path


class _ConsoleStream:
    """File-like object writing text directly to a :class:`QTextEdit`."""

    def __init__(self, widget: QTextEdit) -> None:
        self.widget = widget

    def write(self, text: str) -> int:
        if text:
            # Qt widgets must be manipulated from the GUI thread. Using
            # ``append`` is safe enough for short text snippets.
            self.widget.append(text.rstrip())
        return len(text)

    def flush(self) -> None:  # pragma: no cover - required for file-like API
        pass

from .. import profile_manager as pm
from .. import history

from ..image_scraper import scrape_images


class ImageScraperWidget(QWidget):
    """Simple interface to run the image scraper."""

    def __init__(self) -> None:
        super().__init__()

        self.file_edit = QLineEdit()
        self.file_edit.setPlaceholderText("Fichier texte contenant les URLs")
        file_btn = QPushButton("Parcourir‚Ä¶")
        file_btn.clicked.connect(self._choose_file)

        file_layout = QHBoxLayout()
        file_layout.addWidget(self.file_edit)
        file_layout.addWidget(file_btn)

        self.profile_combo = QComboBox()
        self.profiles: list[dict[str, str]] = []
        self.selected_selector: str = ""
        self.profile_combo.currentIndexChanged.connect(self._on_profile_changed)

        self.folder_edit = QLineEdit()
        self.folder_edit.setPlaceholderText("Dossier de destination")

        browse_btn = QPushButton("Parcourir‚Ä¶")
        browse_btn.clicked.connect(self._choose_folder)

        folder_layout = QHBoxLayout()
        folder_layout.addWidget(self.folder_edit)
        folder_layout.addWidget(browse_btn)

        self.start_btn = QPushButton("Lancer")
        self.start_btn.clicked.connect(self._start)
        self.copy_btn = QPushButton("Copier")
        self.copy_btn.clicked.connect(self._copy_console)

        buttons_layout = QHBoxLayout()
        buttons_layout.addWidget(self.start_btn)
        buttons_layout.addWidget(self.copy_btn)

        self.console = QTextEdit()
        self.console.setReadOnly(True)

        self.progress_bar = QProgressBar()
        self.progress_bar.hide()

        layout = QVBoxLayout(self)
        layout.addWidget(QLabel("Fichier :"))
        layout.addLayout(file_layout)
        layout.addWidget(QLabel("Profil:"))
        layout.addWidget(self.profile_combo)
        layout.addWidget(QLabel("Dossier:"))
        layout.addLayout(folder_layout)
        layout.addLayout(buttons_layout)
        layout.addWidget(self.console)
        layout.addWidget(self.progress_bar)

        self.refresh_profiles()
        last = history.load_last_used()
        self.file_edit.setText(last.get("url", ""))
        self.folder_edit.setText(last.get("folder", ""))

    # ------------------------------------------------------------------
    def _on_profile_changed(self, index: int) -> None:
        if 0 <= index < len(self.profiles):
            self.selected_selector = self.profiles[index].get("selector", "")
        else:
            self.selected_selector = ""

    def set_selected_profile(self, profile: str) -> None:
        for i, p in enumerate(self.profiles):
            if p.get("name") == profile:
                self.profile_combo.setCurrentIndex(i)
                self.selected_selector = p.get("selector", "")
                return
        self.profile_combo.setCurrentIndex(-1)
        self.selected_selector = ""

    def refresh_profiles(self) -> None:
        self.profiles = pm.load_profiles()
        current = self.profile_combo.currentText()
        self.profile_combo.clear()
        for p in self.profiles:
            self.profile_combo.addItem(p.get("name", ""))
        # restore previous selection if possible
        if current:
            self.set_selected_profile(current)
        else:
            self._on_profile_changed(self.profile_combo.currentIndex())

    @Slot()
    def _choose_folder(self) -> None:
        path = QFileDialog.getExistingDirectory(self, "Choisir un dossier")
        if path:
            self.folder_edit.setText(path)

    @Slot()
    def _choose_file(self) -> None:
        path, _ = QFileDialog.getOpenFileName(
            self,
            "Choisir un fichier",
            "",
            "Text Files (*.txt);;All Files (*)",
        )
        if path:
            self.file_edit.setText(path)

    @Slot()
    def _copy_console(self) -> None:
        """Copy the console's contents to the clipboard."""
        text = self.console.toPlainText()
        QApplication.clipboard().setText(text, mode=QClipboard.Clipboard)
        # Also populate the selection clipboard on platforms that support it.
        QApplication.clipboard().setText(text, mode=QClipboard.Selection)

    @Slot()
    def _start(self) -> None:
        file_path = self.file_edit.text().strip()
        selector = self.selected_selector.strip()
        folder = self.folder_edit.text().strip() or "images"
        if not file_path or not selector:
            self.console.append("‚ùå Fichier ou s√©lecteur manquant")
            return

        path = Path(file_path)
        if not path.is_file():
            self.console.append("‚ùå Fichier introuvable")
            return

        try:
            with open(path, "r", encoding="utf-8") as f:
                urls = [line.strip() for line in f if line.strip()]
        except Exception as exc:
            self.console.append(f"‚ùå Erreur √† la lecture du fichier: {exc}")
            return

        if not urls:
            self.console.append("‚ùå Aucun URL dans le fichier")
            return

        self.start_btn.setEnabled(False)
        self.console.clear()
        self.progress_bar.show()
        self.progress_bar.setRange(0, 0)
        stream = _ConsoleStream(self.console)
        old_stdout = sys.stdout
        sys.stdout = stream
        try:
            for url in urls:
                try:
                    total = scrape_images(url, selector, folder)
                except Exception as exc:
                    self.console.append(f"‚ùå Erreur sur {url}: {exc}")
                else:
                    self.console.append(f"‚úÖ {url} - {total} images")
                    history.log_scrape(url, self.profile_combo.currentText(), total, folder)
        finally:
            sys.stdout = old_stdout
            self.progress_bar.hide()
            self.start_btn.setEnabled(True)



# widgets/profile_widget.py
from PySide6.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QListWidget,
    QLineEdit,
    QPushButton,
    QLabel,
)
from PySide6.QtCore import Signal, Slot

from .. import profile_manager as pm


class ProfileWidget(QWidget):
    """Widget to manage scraping profiles."""

    profile_chosen = Signal(str)
    profiles_updated = Signal()

    def __init__(self) -> None:
        super().__init__()

        self.profile_list = QListWidget()
        self.profile_list.itemSelectionChanged.connect(self._on_profile_selected)

        self.name_edit = QLineEdit()
        self.selector_edit = QLineEdit()
        self.selector_edit.setText(
            ".woocommerce-product-gallery__image a"
        )

        self.add_btn = QPushButton("Ajouter")
        self.add_btn.clicked.connect(self._add_profile)
        self.update_btn = QPushButton("Modifier")
        self.update_btn.clicked.connect(self._update_profile)
        self.delete_btn = QPushButton("Supprimer")
        self.delete_btn.clicked.connect(self._delete_profile)

        form_layout = QVBoxLayout()
        form_layout.addWidget(QLabel("Nom:"))
        form_layout.addWidget(self.name_edit)
        form_layout.addWidget(QLabel("S√©lecteur CSS:"))
        form_layout.addWidget(self.selector_edit)

        btn_layout = QHBoxLayout()
        btn_layout.addWidget(self.add_btn)
        btn_layout.addWidget(self.update_btn)
        btn_layout.addWidget(self.delete_btn)

        layout = QVBoxLayout(self)
        layout.addWidget(QLabel("Profils existants:"))
        layout.addWidget(self.profile_list)
        layout.addLayout(form_layout)
        layout.addLayout(btn_layout)

        self._load_profiles()

    # ------------------------------------------------------------------
    def _load_profiles(self) -> None:
        """Load profiles from :mod:`profile_manager` and populate the list."""
        self.profiles = pm.load_profiles()
        self._refresh_list()

    def _refresh_list(self) -> None:
        self.profile_list.clear()
        for profile in self.profiles:
            self.profile_list.addItem(profile.get("name", ""))

    @Slot()
    def _on_profile_selected(self) -> None:
        current = self.profile_list.currentRow()
        if current < 0 or current >= len(self.profiles):
            return
        profile = self.profiles[current]
        self.name_edit.setText(profile.get("name", ""))
        self.selector_edit.setText(profile.get("selector", ""))
        self.profile_chosen.emit(profile.get("name", ""))

    @Slot()
    def _add_profile(self) -> None:
        name = self.name_edit.text().strip()
        selector = self.selector_edit.text().strip()
        if not name or not selector:
            return
        try:
            pm.add_profile(name, selector)
        except ValueError:
            return
        self._load_profiles()
        self.profiles_updated.emit()

    @Slot()
    def _update_profile(self) -> None:
        name = self.name_edit.text().strip()
        selector = self.selector_edit.text().strip()
        if not name or not selector:
            return
        if pm.update_profile(name, selector):
            self._load_profiles()

    @Slot()
    def _delete_profile(self) -> None:
        current = self.profile_list.currentRow()
        if current < 0 or current >= len(self.profiles):
            return
        name = self.profiles[current].get("name", "")
        if pm.delete_profile(name):
            self._load_profiles()
            self.profiles_updated.emit()


# widgets/history_widget.py
from PySide6.QtWidgets import QWidget, QVBoxLayout, QTextEdit, QPushButton
from PySide6.QtCore import Slot

from .. import history


class HistoryWidget(QWidget):
    """Display previous scraping runs."""

    def __init__(self) -> None:
        super().__init__()
        self.text = QTextEdit(readOnly=True)
        self.refresh_btn = QPushButton("Rafra√Æchir")
        self.refresh_btn.clicked.connect(self.refresh)

        layout = QVBoxLayout(self)
        layout.addWidget(self.text)
        layout.addWidget(self.refresh_btn)

        self.refresh()

    @Slot()
    def refresh(self) -> None:
        entries = history.load_history()
        lines = []
        for entry in entries:
            lines.append(
                f"{entry.get('date','')} - {entry.get('url','')} ("\
                f"{entry.get('profile','')} - {entry.get('images',0)} images)"
            )
        self.text.setPlainText("\n".join(lines))

# widgets/scrap_widget.py (partie relevante)
from PySide6.QtWidgets import QWidget, QVBoxLayout, QTabWidget

from .image_widget import ImageScraperWidget
from .history_widget import HistoryWidget


class _DummySubWidget(QWidget):
    def __init__(self) -> None:
        super().__init__()
        layout = QVBoxLayout(self)

    def set_selected_profile(self, profile: str) -> None:
        pass

    def refresh_profiles(self) -> None:
        pass


class ScrapWidget(QWidget):
    def __init__(self) -> None:
        super().__init__()
        self.modules_order = ["images", "combined", "history"]
        self.images_widget = ImageScraperWidget()
        self.combined_widget = _DummySubWidget()
        self.history_widget = HistoryWidget()
        self.tabs = QTabWidget()
        self.tabs.addTab(self.images_widget, "Images")
        self.tabs.addTab(self.combined_widget, "Combined")
        self.tabs.addTab(self.history_widget, "Historique")
        layout = QVBoxLayout(self)
        layout.addWidget(self.tabs)

    def toggle_module(self, name: str, enabled: bool) -> None:
        pass

    def set_rename(self, enabled: bool) -> None:
        pass


# Fin du fichier
